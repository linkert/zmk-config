#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*
Key positions:

00 01 02 03 04 05       06 07 08 09 10 11
12 13 14 15 16 17       18 19 20 21 22 23
24 25 26 27 28 29       30 31 32 33 34 35
36 37 38 39 40 41       42 43 44 45 46 47
48 49 50 51 52 53       54 55 56 57 58 59
                  60 61
*/

/ {
    behaviors {
        modsLeft: modsLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "MODSLEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 54 55 56 57 58 59 61>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
        };

        modsRight: modsRight {
            compatible = "zmk,behavior-hold-tap";
            label = "MODSRIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53 60>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
        };

        morph_symNav_alt: morph_symNav_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SYMNAV_ALT";
            bindings = <&mo 1>, <&mo 0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC    &kp N1            &kp N2             &kp N3              &kp N4            &kp N5     &kp N6             &kp N7             &kp N8               &kp N9                  &kp N0                 &kp BSPC
&kp TAB    &kp Q             &kp W              &kp F               &kp P             &kp B      &kp J              &kp L              &kp U                &kp Y                   &kp RA(W)              &kp DEL
&kp LSHFT  &modsLeft LALT A  &modsLeft LCTRL R  &modsLeft LSHIFT S  &modsLeft LGUI T  &kp G      &kp M              &modsRight RGUI N  &modsRight RSHIFT E  &modsRight RCTRL RA(O)  &modsRight RALT RA(A)  &kp RET
&kp LCTRL  &kp Z             &kp X              &kp C               &kp D             &kp V      &kp K              &kp H              &kp O                &kp I                   &kp SQT                &kp RCTRL
&trans     &trans            &trans             &trans              &trans            &kp SPACE  &kp SPACE          &kp LEFT           &kp DOWN             &kp UP                  &kp RIGHT              &trans
                                                                                      &trans     &morph_symNav_alt
            >;
        };

        symNav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans         &trans         &trans          &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mt UNDER MINUS  &mt LBRC LBKT  &mt RBRC RBKT  &kp LPAR        &kp RPAR       &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mt COLON SEMI   &kp LEFT       &kp DOWN       &kp UP          &kp RIGHT      &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mt PLUS EQUAL   &mt LT COMMA   &mt GT DOT     &mt QMARK FSLH  &mt PIPE BSLH  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans         &trans         &trans          &trans         &trans
                                        &trans  &trans
            >;
        };

        symNav_alt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans         &trans         &trans          &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mt UNDER MINUS  &mt LBRC LBKT  &mt RBRC RBKT  &kp LPAR        &kp RPAR       &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mt COLON SEMI   &kp HOME       &kp PG_DN      &kp PG_UP       &kp END        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mt PLUS EQUAL   &mt LT COMMA   &mt GT DOT     &mt QMARK FSLH  &mt PIPE BSLH  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans         &trans         &trans          &trans         &trans
                                        &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
